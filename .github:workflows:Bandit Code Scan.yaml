name: Bandit Code Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  bandit_scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Bandit
      run: pip install bandit

    - name: Run Bandit
      id: bandit_scan
      run: bandit -r . -f json -o bandit_output.json || true

    - name: Analyze Bandit results
      id: analyze_results
      run: |
        CRITICAL_COUNT=$(jq '[.results[] | select(.issue_severity=="CRITICAL")] | length' bandit_output.json)
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "block=true" >> $GITHUB_ENV
        else
          echo "block=false" >> $GITHUB_ENV
        fi

    - name: Comment on PR and block if critical issues found
      if: env.block == 'true'
      run: |
        PR_NUMBER=$(jq --raw-output .number "$GITHUB_EVENT_PATH")
        COMMENT_BODY='Block'
        curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          --data "{\"body\":\"$COMMENT_BODY\"}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
        exit 1  # Exit with error to block the PR

    - name: Comment on PR and merge if no critical issues found
      if: env.block == 'false'
      run: |
        PR_NUMBER=$(jq --raw-output .number "$GITHUB_EVENT_PATH")
        COMMENT_BODY='Successful'
        curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          --data "{\"body\":\"$COMMENT_BODY\"}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
        curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -X PUT \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/merge"
